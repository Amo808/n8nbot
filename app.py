import logging
import requests
from flask import Flask, request, jsonify
import threading
import time

app = Flask(__name__)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í–µ–±—Ö—É–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
WEBHOOKS = {
    "user": "https://n8n-e66f.onrender.com/webhook/d6cbc19f-5140-4791-8fd8-c9cb901c90c7",
    "bot": "https://n8n-e66f.onrender.com/webhook/a392f54a-ee58-4fe8-a951-359602f5ec70",
    "test": "https://n8n-e66f.onrender.com/webhook-test/d6cbc19f-5140-4791-8fd8-c9cb901c90c7",
    "amo": "https://n8n-e66f.onrender.com/webhook/d6cbc19f-5140-4791-8fd8-c9cb901c90c7"
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç–∞–π–º–µ—Ä–æ–≤
message_store = {}
timers = {}
recent_messages = {}
DUPLICATE_TIMEOUT = 5  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (—Å–µ–∫—É–Ω–¥—ã)
PROCESS_DELAY = 60  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (—Å–µ–∫—É–Ω–¥—ã)


def is_duplicate(sender_id, message_id, message_text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–º."""
    current_time = time.time()
    last_message = recent_messages.get(sender_id, {})

    if (
        last_message.get("id") == message_id or
        (last_message.get("text") == message_text and (current_time - last_message.get("time", 0)) < DUPLICATE_TIMEOUT)
    ):
        logger.info(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω! ID: {message_id}, —Ç–µ–∫—Å—Ç: {message_text}")
        return True

    recent_messages[sender_id] = {"id": message_id, "text": message_text, "time": current_time}
    return False


def send_to_target(data, webhook):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä."""
    try:
        response = requests.post(webhook, json={"messages": data})
        response.raise_for_status()
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ {webhook}.")
    except requests.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {webhook}: {e}")


def extract_text(data):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –≤ JSON."""
    if isinstance(data, dict):
        if "text" in data and isinstance(data["text"], str):
            return data["text"]
        for value in data.values():
            result = extract_text(value)
            if result:
                return result
    elif isinstance(data, list):
        for item in data:
            result = extract_text(item)
            if result:
                return result
    return None


def process_user_messages(sender_id, webhook_key):
    """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    time.sleep(PROCESS_DELAY)
    if sender_id in message_store:
        messages = message_store.pop(sender_id, [])
        send_to_target(messages, WEBHOOKS[webhook_key])
        send_to_target(messages, WEBHOOKS["test"])
    timers.pop(sender_id, None)


@app.route("/", methods=["POST"])
def handle_amo_webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç amoCRM."""
    try:
        data = request.json
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º UID –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        sender_id = data.get("unsorted[add][0][source_data][client][id]", [""])[0]
        message_id = data.get("unsorted[add][0][source_data][data][0][id]", [""])[0]
        message_text = extract_text(data.get("unsorted[add][0][source_data][data]", []))

        if not sender_id or not message_text:
            logger.warning("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ ID –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return jsonify({"status": "ignored"}), 200

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
        if is_duplicate(sender_id, message_id, message_text):
            return jsonify({"status": "duplicate"}), 200

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        if sender_id not in message_store:
            message_store[sender_id] = []
        message_store[sender_id].append({"id": message_id, "text": message_text})

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        if sender_id not in timers:
            timers[sender_id] = threading.Thread(target=process_user_messages, args=(sender_id, "user"))
            timers[sender_id].start()

        return jsonify({"status": "received"}), 200

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
